name: Create Release

on:
  workflow_dispatch:
    inputs:
      postfix:
        description: 'Any postfix to be appended to the release, e.g.: RC1'
        default: ''

permissions:
  contents: write

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '24'
          architecture: x64
          cache: 'maven'
      - name: Build software
        run: mvn -B install --no-transfer-progress --file pom.xml
  release:
    needs: validate
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_version.outputs.tag_version }}
    steps:
      - name: Check version format
        run: |
          CURRENT_SNAPSHOT=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          if [[ "${CURRENT_SNAPSHOT}" != *"-SNAPSHOT"* ]]; then
            echo "Release version is correct (does not contain -SNAPSHOT)"
          else
            echo "::error::Release version should not contain -SNAPSHOT"
            exit 1
          fi
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '24'
          architecture: x64
          cache: 'maven'
      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "gjong@users.noreply.github.com"
      - name: Set release version
        id: set_version
        run: |
          mvn versions:set versions:commit -DremoveSnapshot -q
          RELEASE_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          if [ -n "${{ github.event.inputs.postfix }}" ]; then
            echo "Appending postfix: ${{ github.event.inputs.postfix }}"
            mvn versions:set versions:commit -DnewVersion="${RELEASE_VERSION}-${{ github.event.inputs.postfix }}"
          fi;
          
          RELEASE_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV
          echo "tag_version=${RELEASE_VERSION}" >> $GITHUB_OUTPUT
      - name: Commit release
        run: |
          git add .
          git commit -m "chore: prepare release ${{ env.RELEASE_VERSION }}"
          git push
      - name: Tagging stable release
        run: |
          git tag ${{ env.RELEASE_VERSION }}
          git push origin ${{ env.RELEASE_VERSION }}

  github-release:
    needs: release
    runs-on: ubuntu-latest
    if: ${{ needs.release.outputs.version }}
    steps:
      - name: Create github release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.release.outputs.version }}
          name: Release ${{ needs.release.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  prepare-next:
    needs: release
    runs-on: ubuntu-latest
    if: ${{ needs.release.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '24'
          architecture: x64
          cache: 'maven'
      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "gjong@users.noreply.github.com"
          git pull
      - name: Prepare next build phase
        run: |
          mvn versions:set versions:commit -DnextSnapshot -q
          NEXT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "NEXT_VERSION=${NEXT_VERSION}" >> $GITHUB_ENV
      - name: Pushing committed snapshot
        run: |
          git add .
          git commit -m "chore: prepare snapshot version ${{ env.NEXT_VERSION }}"
          git push
